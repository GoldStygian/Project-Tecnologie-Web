jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    services:
      sonar:
        image: sonarqube:9-community
        # Mappiamo la porta 9000
        ports:
          - 9000:9000
        # Alleggeriamo un po' ES, ma soprattutto aumentiamo /dev/shm
        env:
          # ElasticSearch JVM: minimo 512 MB, massimo 512 MB
          SONAR_ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --shm-size=1g
          --health-cmd="curl -fsSL http://localhost:9000/api/system/health | grep -q '\"status\":\"GREEN\"' || exit 1"
          --health-interval=15s
          --health-timeout=10s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - name: Wait for SonarQube to be healthy
        run: |
          echo "➡️ Attendo SonarQube…"
          for i in {1..30}; do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9000/api/system/health)
            if [ "$http_code" = "200" ]; then
              echo "✅ SonarQube pronto!"
              exit 0
            fi
            echo "  - Tentativo $i: HTTP $http_code, riprovo tra 10s…"
            sleep 10
          done
          echo "❌ SonarQube non si è avviato in tempo" >&2
          exit 1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          sonar-host-url: http://localhost:9000
          sonar-token:    ${{ secrets.SONAR_TOKEN }}
          args: >
            -Dsonar.projectKey=tuo-progetto-chiave
            -Dsonar.sources=src
            -Dsonar.java.binaries=target/classes

      - name: Build
        run: mvn clean verify
